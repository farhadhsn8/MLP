# -*- coding: utf-8 -*-
"""implementationDynamicMLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/farhadhsn8/c92b73352a30b5e7b2341848de30d6ba/implementationdynamicmlp.ipynb

## Attribute Information:

1. sepal length in cm
2. sepal width in cm
3. petal length in cm
4. petal width in cm

## class:
1. Iris Setosa
2. Iris Versicolour
3. Iris Virginica
"""

import matplotlib.pyplot as plt
from sklearn import datasets
import numpy as np
iris = datasets.load_iris()

iris = datasets.load_iris()
features = iris.data  
lables = iris.target
type(features)
features.shape   # (150, 4)
lables.shape    # (150,)
NUMBER_OF_OUTPUT = 1

class MLP:

  def __init__(self):
    self.numberOfLayers = int(input('enter number of layers :'))
    self.layers =  np.empty(self.numberOfLayers,dtype=Layer)
    self.makeLayers()
    

  def makeLayers(self):
    for i in range(self.numberOfLayers):
      self.layers[i] = Layer(i , self)

#--------------------------------------------------------------------------


class Layer:

  def __init__(self,layerAddress , MLP):
    self.MLP = MLP
    self.layerAddress = layerAddress
    self.numberOfPerceptrons = self.getNumberOfPerceptrons()
    self.activityFunction = self.getActivityFunction()
    self.perceptrons =  np.empty(self.numberOfPerceptrons,dtype=Perceptron)
    self.perceptrons = self.makePerceptrons()


  def getActivityFunction(self):
    return input('enter type of activityFunction for  layer '+ str(self.layerAddress) + '(start from 0) : ')

  def getNumberOfPerceptrons(self):
    if(self.layerAddress == 0 ):
      return  features.shape[1] + 1
    if(self.layerAddress == self.MLP.numberOfLayers - 1 ):
      return  NUMBER_OF_OUTPUT
    return int(input('enter number of Perceptrons for  layer '+ str(self.layerAddress  ) + ' (start from 0) : '))

  def makePerceptrons(self):
    perceptrons =  np.empty(self.numberOfPerceptrons,dtype=Perceptron) 
    for i in range( self.numberOfPerceptrons ):
      perceptrons[i] = Perceptron( i , self)
    return perceptrons

  def getPreviosLayer(self):
    return self.layerAddress != 0 and self.MLP.layers[self.layerAddress - 1 ] or -1

  
  def getNextLayer(self):
    return self.layerAddress != self.MLP.numberOfLayers - 1 \
     and self.MLP.layers[self.layerAddress + 1 ] or -1

#--------------------------------------------------------------------------




class ActivityFunction:

  def __init__(self, name, age):
    self.name = name
    self.age = age



#--------------------------------------------------------------------------



class Perceptron:

  def __init__(self , perceptronNumber , layer ):   # [layerAddress  ,  perceptron] 
    self.perceptronNumber = perceptronNumber
    self.layer = layer
    self.numberOfInputs  =  self.getNumberOfInputs()

  def getNumberOfInputs(self):
    if(self.layer.layerAddress == 0 ):
      return  1
    return self.layer.getPreviosLayer().numberOfPerceptrons

  
  def calculateOutput(self):
    

 








#--------------------------------------------------------------------------



class InputBranch:

  def __init__(self, w , x):
    self.w = w
    self.x = x
  def calculateOutput(self):
    return self.w * self.x

A = MLP()

# shape of MLP
for i in A.layers:
  print(i)
  for j in i.perceptrons:
    print( j.numberOfInputs)

# !git config --global user.name "farhadhsn8"
# !git config --global user.password edenhazard1394

! git push -u origin master